    •  Installation of RHEL9 and Linux File System. 

◦ Introduction to RHEL 9:
	Red Hat Enterprise Linux 9, commonly known as RHEL 9, is a highly utilized commercial operating system employed across various industries worldwide. The RHEL series, developed by Red Hat Inc., a subsidiary of IMB, is renowned for its security, resilience, and suitability for business use. Officially launched on May 17, 2022, RHEL 9 is equipped with the Linux Kernel 5.14.0 and features GNOME 40 as it desktop environment, with ‘dnf’ serving as its default package manager. 


◦ Hardware Requirements:
	The system specification required for a successful installation of Red Hat Enterprise Linux 9 depends on the kind of installation one is looking forward to performing. Creating a RHEL 9 GUI less server installation will take significantly less resources, whereas doing a workstation installation will take much more resources. However, here's a general hardware requirement reference to get RHEL 9 up and running:

	Processor: 64 Bit Processor (Intel64, AMD64 or ARM64)
		Minimum: 1GHz Single or Multi CPU
		Recommended: 2GHz Single or Multi CPU
	
	Memory (RAM): 
		Minimum: 2-3 GB 
		Recommended: 4 GB

	Disk Space:s
		Minimum: 10 GB of Free Space
		Recommended: 20 GB or more Free Space

	Network: 
		Recommended: A wired Ethernet Network Adapter 

	Graphics Display Resolution: 
		Minimum: 800 x 600
		Recommended: 1026 x 768

	Installation Media: USB Stick Boot Media


◦ Steps to Install RHEL 9:
	1. Acquire the RHEL 9 installation media, either by downloading the ISO file from the Official Red Hat Website or using physical media. 
	2. Create a boot-able USB or burn the ISP to a DVD. 
	3. Boot your the system from the Installation Media. 
	4. Select the option 'Install Red Hat Enterprise Linux 9.0' from the option menu while booting. 
	5. Select the preferred language which will be used during OS installation. 
	6. In this step, initially we get the Installation Summary screen we can configure the language, time zone and keyboard settings. 
	7. Set up disk partitions, either manually we can opt for standard partitioning or ‘lvm’ setup or we can set up disk partition using the automatic partitioning option. 
	8. Customize the software packages to be installed or proceed with the default package selection. 
	9. Set passwsord to the root account and set up a user account. 
	10 Confirm the installation settings in the Installation Summary screen and initiate the installation process. 
	11. Upon completion, click on reboot option and log in to the newly install RHEL9 system. 


◦ Linux File System:
	Linux support multiple file system types like ext2, ext3, ext4, xfs, btrfs, etc., each with its own characteristics. The Linux File System provides a framework for organizing and managing data efficiently on Linux systems. The choice of file system depends on factors such as performance, its features and use cases of the user. The Linux File System is a hierarchical and tree-structured organization of files and directories used by the Linux Operating System to manage and store data. It begins with the root directory "/" and follow a tree-like structure, with directories containing files and sub-directories. Linux file names are case-sensitive, allowing for alphanumeric and special characters. Various file types, including regular-files, directories and symbolic links, are recognized. Mount points enable access to different storage devices or network resources, and file permissions regulate access.


    • Access the command line 
◦ Log in to a Linux system and run simple commands using the shell. 
Who, whoami, who am i, pwd, date, whereis, ls, mkdir, rmdir, cat, touch, info, man, whatis,cd , rm. 

Commands: 
1. who: The 'who' command in Linux prints information about users who are currently logged in to the system. If no options or flags are passed along with the who command, by default it prints the login name of the user, terminal line, login time, and remote host name.

Example:

	INPUT: 
	$ who
	
	OUTPUT:
	csgs     seat0        2023-12-10 01:29 (login screen)
 	csgs     tty2         2023-12-10 01:29 (tty2)



2. whoami: The 'whoami' command in Linux prints the name of the user associated with the current effective user id. In other words this command allows Linux users to see the currently logged-in user. The command whoami is equivalent to the command 'id -un'

Example:

	INPUT: 
	$ whoami
	
	OUTPUT: 
	csgs



3. pwd: The 'pwd' command in linux prints the name of the current working directory. By default if this command is ran without specifying any option or flag the -P flag is assumed which avoids all symlinks. 

Example:

	INPUT:
	$ pwd
	
	OUTPUT:
	/home/csgs/Desktop



4. date: The 'date' command prints or set the system date and time. It displays the current time in the given format or set the system date. 

Example:

	INPUT: 
	$ date
	
	OUTPUT:
	Sun Dec 10 02:38:19 AM IST 2023



5. whereis: The 'whereis' command helps us locate the binary, source, and manual pages for a command. This command helps us look for or find the path or location of any package or binary. In order to use the whereis command to find a specific package we simply mention the name of that package after the whereis command. 

Syntax: whereis package_name 

Example:

	INPUT:
	$ whereis python
	
	OUPUT:
	python: /usr/bin/python /usr/share/man/man1/python.1.gz



6. ls: The 'ls' command prints the list of the directory contents by default which means that it will list down whatever is within a directory, i.e the contents. It lists information about the files and directories (contents) of the current directory by default, however we can mention any specific path after the 'ls' command and that specified directory's content list is fetched by the 'ls' command. The 'ls' command has the a bunch flags or options that we can use get additional information formatted in a certain way.

Syntax: 
	ls
	ls path_of_directory 

Flags/Options of 'ls' command:
	ls -a : The -a flag prints all the hidden files in the directrory content that ls is listing. 
	ls -l: The -l flag makes the ls command print all the content in a list format.
	ls -ld: The -d directory lists the directories themselves and not their contents and the -l flag here displays it all in a list format. 
	ls -ldh: The -h flag over here stands for human readable. If used along with -l flag it prints sizes of files like 1K, 23M, 4G etc.

Example:

	INPUT:
	$ ls 

	OUTPUT: 
	Desktop    Downloads     Public     Videos     Documents     Music     Pictures  Templates


	INPUT:
	$ ls -la

	OUTPUT:
	total 8
	drwxr-xr-x.  3 csgs csgs   47 Dec 10 03:26 .
	drwx------. 16 csgs csgs 4096 Dec 10 03:14 ..
	-rw-r--r--.  1 csgs csgs   78 Dec  9 15:04 learndnf.txt
	drwxr-xr-x.  3 csgs csgs   67 Dec 10 03:16 Linux-Project



7. mkdir: The 'mkdir' command lets us make directories. We can use the mkdir command followed by the name of the directories that we want to create and mkdir will create the directories with the specified names. We can use the mkdir command to create any number of directories in one go, we are required to put spaces between the names of different directories in order to create more than one directory. The 'mkdir' command by default doesn't display any output on the terminal after a execution, if we want it to display anything we are required to use the -v flag. 

Syntax:
	mkdir directoryname
	mkdir directory1 directory2 directory3

Flags of 'mkdir' command:
	mkdir -v: The -v flag stands for verbose and it prints a message for each directory created. 
	mkdir -p: The -p flag lets us make parent directories as needed which simply means that it lets us create directories within directories. 
	
Example:
	
	INPUT:
	$ mkdir -v csgs

	OUPUT:
	mkdir: created directory 'csgs'


	INPUT:
	$ mkdir -vp TIU/BCA/1F

	OUTPUT:
	mkdir: created directory 'TIU'
	mkdir: created directory 'TIU/BCA'
	mkdir: created directory 'TIU/BCA/1F'



8. rmdir: The 'rmdir' command helps us delete empty directories. We can only delete directories that are empty using the rmdir command in linux. By default the rmdir command doesn't output anything in the terminal after a successful execution, we can however use the -v flag to display the output of an execution of the rmdir command. 

Syntax:
	rmdir directoryname

Flags of 'rmdir' command:
	rmdir -p: The -p flag helps us delete directories and its ancestors. This however only works if both the directory and its ancestores are empty directories. 
	rmdir -v: The -v flag stands for verbose and it outputs a message in the terminal for every execution of the rmdir command.  

Example:

	INPUT:
	$ rmdir -v csgs

	OUTPUT:
	rmdir: removing directory, 'csgs'



9. cat: The 'cat' command is used to concatenate files and print the content of the mentioned file on the standard output. However, one of the popular use of the 'cat' command is to make files with it using the '>' redirection operator in Linux followed by the name of the file. In simple terms, we can easily create files and view the content of a files using the 'cat' command. 

Syntax:
	cat>filename.txt : To create a file
	cat filename.txt : To view contents of a file

Example:

	INPUT:
	$ cat>csgs.txt

	OUTPUT:
	While creating a file using the cat command followed by the name of the file that we are creating and the redirection operator, the cat command doesn't output anything in the terminal. 


	INPUT:
	$ cat csgs.txt

	OUTPUT:
	I am Chandra Sreas Gop
	A student of BCA at TIU. 
	I am a Linux Enthusiast	
	I use Arch btw!



10. touch: The 'touch' command is used the change the access and modify the time-stamps of the specified files. However, if any file of the mentioned name is not present touch command creates an empty file with the mentioned name and by default 'touch' command sets file times-tamps to the current time. As a result one of the popular use of the 'touch' command is to create files with it, in order to do so we simply write the file name and the required extension after the touch command.  

Syntax:
	touch filename.txt

Examples:
	
	INPUT:
	$ touch csgs.txt

	OUTPUT:
	While creating any file using the touch command it doesn't output anything after execution. 



11. info: The 'info' command helps us read documentation in the info format of the mentioned command. We simply type the name of the command that we want to know more about followed by the info keyword. We press 'q' to exit or quit the info documentation page of any command. 

Syntax:
	info command

Example:

	INPUT:
	$ info mv

	OUTPUT:
	11.4 ‘mv’: Move (rename) files
	==============================

	‘mv’ moves or renames files (or directories).  Synopses:

    	 mv [OPTION]... [-T] SOURCE DEST
    	 mv [OPTION]... SOURCE... DIRECTORY
    	 mv [OPTION]... -t DIRECTORY SOURCE...
	.........................................................
	.........................................................
	The info command brings the entire documentation of the mentioned command in info format, in this case 'info' will bring the documentation of the 'mv' command.



12. man: Man stands for manual and the 'man' command provides us an interface to the system reference manuals, and mentioning any command after the 'man' command simply brings the reference manual page of the specified command. We press 'q' to quit the reference manual page of any command retrieved by the man command. 

Syntax:
	man command

Example:

	INPUT:
	$ man mv

	OUTPUT:
	MV(1)                           User Commands                          MV(1)

	NAME
    	   mv - move (rename) files

	SYNOPSIS
    	   mv [OPTION]... [-T] SOURCE DEST
    	   mv [OPTION]... SOURCE... DIRECTORY
    	   mv [OPTION]... -t DIRECTORY SOURCE...

	DESCRIPTION
    	   Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.
	...........................................................................
	..........................................................................
	
	The man command brings the entire reference manual page of the mentioned command, in this case 'man' command will bring the documentation of the 'mv' command. 



13. whatis: The 'whatis' command displays one-line manual page descriptions of the mentioned commands. 

Syntax:
	whatis command

Example:

	INPUT:
	$ whatis gcc

	OUTPUT:
	gcc (1)              - GNU project C and C++ compiler



14. cd: The 'cd' command stands for change directory and it simply stands for what it is, cd helps us change directory. However, simply typing cd without mentioning any paths afterwards takes us to the home directory of the current user. 

Syntax:
	cd 
	cd Directory/Directory2

Example:

	INPUT:
	$ cd

	OUTPUT:
	The cd command doesn't output anything after execution, however this command without any path mentioned afterwards will take us to the home of the current directory. 


	INPUT:
	$ cd /home/csgs/Desktop

	OUTPUT:
	The cd command won't output anything in this case either. However, if we use the 'pwd' command after executing this command we will see that we have navigated to the 'Desktop' directory. 



15. rm : The 'rm' command helps us remove files or directories. 

Syntax:
	rm filename.txt
	rm -rf directoryname

Flags of 'rm' command:
	rm -f: The -f flag ignore nonexistent files and arguments and never prompts
	rm -r: The -r flag remove directories and their contents recursively. 
	rm -v: The -v flag stands for verbose and it explains what is being done.

Example:

	INPUT:
	$ rm -v csgs.txt

	OUTPUT:
	removed 'csgs.txt'

	The 'rm' command doesn't output anything by default, however we can use the -v flag to get output on execution of 'rm' command. 





	• Manage files from the command line
◦ Copy, Move, delete and organize files from the bash shell prompt. 

 
1. Copy:
cp: The ‘cp’ command helps us copy files and directories to our desired locations.

Syntax:
	cp -av filename.txt Destination_Directory/

Flags:
	cp -a: The-a flag helps copy the file/directory with the same permission settings and metadata as the original. It preserve as much as possible of the structure and attributes of the original files in the copy.
	cp -v: The v flag explains what is being done. 


Example: 

	INPUT:
	$ cp -av csgs.txt Desktop
	
	OUTPUT:
	'csgs.txt' -> 'Desktop/csgs.txt'




2. Move:
mv: The ‘mv’ command helps us move files and directories from one directory to another or rename a file or directory. We can also use the mv command to convert hidden files to normal files and vice-versa

Syntax:
	mv -v filename.txt Destination/filename.txt
	mv -v Directory/ DestinationDirectory/
	mv -v filename.txt newfilename.txt
	mv -v .hiddenfilename.txt filename.txt
	
Flags:
	mv -v: The v flag explains what is being done.

Example:

	INPUT:
	$ mv -v CSGS/ Desktop/

	OUTPUT:
	renamed 'CSGS/' -> 'Desktop/CSGS'

	INPUT:
	$ mv -v .csgs.txt csgs.txt

	OUTPUT:
	renamed '.csgs.txt' -> 'csgs.txt'
	
	The ‘mv’ command doesn’t output anything by default, however we can use the -v flag to get an output on the execution of mv command. 




3. Delete:
rm : The 'rm' command helps us remove files or directories. 

Syntax:
	rm filename.txt
	rm -rf directoryname

Flags of 'rm' command:
	rm -f: The -f flag ignore nonexistent files and arguments and never prompts
	rm -r: The -r flag remove directories and their contents recursively. 
	rm -v: The -v flag stands for verbose and it explains what is being done.

Example:

	INPUT:
	$ rm -v csgs.txt

	OUTPUT:
	removed 'csgs.txt'

	The 'rm' command doesn't output anything by default, however we can use the -v flag to get output on execution of 'rm' command. 



4. Organize Files:
The following commands can be used for file management and organization in Linux:
	i. cat: The ‘cat’ command can be used to view the contents of a file and also to create new files from the command line. 
	ii. tree: The ‘tree’ command lists the contents of directories in a tree-like format which helps us visualize the directory structures and helps us locate files. 
	iii. 	cd: The ‘cd’ command helps us navigate to different directories. 
 	iv. ls: The ‘ls’ command helps us list the contents in a directory. 
